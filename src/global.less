@import '~nav-frontend-core/less/_variabler';
@import '~nav-frontend-core/less/core';
@import '~@navikt/ds-css/dist/index.css';

@font-size-factor: 1.125;
@pixel-size-rem: 1 / (16 * @font-size-factor);

// Screen size breakpoints
//
// Relative units does not take CSS font-size into account when used in media queries,
// but they do when used as CSS attribute values. We use separate variable sets to ensure
// width and breakpoints scale consistently with browser font-size without being affected
// by CSS font-size.
@_MQ_mobileMaxWidth: 48em; // 768px
@_MQ_tabletMinWidth: @_MQ_mobileMaxWidth;
@_MQ_tabletMaxWidth: 64em; // 1024px
@_MQ_desktopMinWidth: @_MQ_tabletMaxWidth;
@_MQ_desktopMaxWidth: 90em; // 1440px

@mobileMaxWidth: calc(@_MQ_mobileMaxWidth / @font-size-factor);
@tabletMinWidth: @mobileMaxWidth;
@tabletMaxWidth: calc(@_MQ_tabletMaxWidth / @font-size-factor);
@desktopMinWidth: @tabletMaxWidth;
@desktopMaxWidth: calc(@_MQ_desktopMaxWidth / @font-size-factor);

@mq-screen-mobile: ~'only screen and (max-width: @{_MQ_mobileMaxWidth})';
@mq-screen-tablet: ~'only screen and (min-width: @{_MQ_tabletMinWidth}) and (max-width: @{_MQ_tabletMaxWidth})';
@mq-screen-tablet-and-desktop: ~'only screen and (min-width: @{_MQ_tabletMinWidth}) ';
@mq-screen-desktop: ~'only screen and (min-width: @{_MQ_desktopMinWidth}) ';
@mq-screen-desktop-large: ~'only screen and (min-width: @{_MQ_desktopMaxWidth}) ';

@padding-sides-desktop: 3rem;
@padding-sides-tablet: 1rem;
@padding-sides-mobile: 1rem;

html {
    font-size: @font-size-factor * 100%;
}

#__next,
.decorator-utils-container {
    background-color: @navGraBakgrunn;
}

.decorator-utils-container {
    min-height: 4rem;
    margin-bottom: -4rem;
}

.app {
    max-width: @desktopMaxWidth;
    min-height: 20rem;
    margin: 0 auto;

    @media @mq-screen-mobile {
        padding: 0 @padding-sides-mobile 2rem @padding-sides-mobile;
    }

    @media @mq-screen-tablet {
        padding: 0 @padding-sides-tablet 2rem @padding-sides-tablet;
    }

    @media @mq-screen-desktop {
        padding: 0 @padding-sides-desktop 2rem @padding-sides-desktop;
    }
}

#decorator-header {
    min-height: 88px;

    @media @mq-screen-tablet-and-desktop {
        min-height: 106px;
        &.with-context {
            min-height: 150px;
        }
    }
}

@media print {
    .decorator-wrapper {
        display: none;
    }
}

.hidden {
    display: none;
}

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

// Rounds a rem-value to the nearest value which is divisible by
// the current pixel size, taking global font-size into account
#round-rem(@value: 0) {
    @valueUpper: @value + @pixel-size-rem / 2;
    @result: @valueUpper - mod(@valueUpper, @pixel-size-rem);
}

#px-to-rem(@px) {
    @rem: unit(@px * @pixel-size-rem, rem);
}

// Makes the element cover the entire screen-width
.full-width-mixin() {
    @side-width: calc((100vw - 100%) / 2);
    @side-width-negative: calc((100vw - 100%) / -2);

    padding-left: @side-width;
    padding-right: @side-width;
    margin-left: @side-width-negative;
    margin-right: @side-width-negative;
}

.panel-inset-focus-mixin() {
    outline: 0;
    box-shadow: 0 0 0 3px inset @fokusFarge;
}
