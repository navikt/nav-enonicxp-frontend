name: Update Playwright screenshots
on:
  push:
    branches: [test-playwright-torsdag]
  pull_request:
    branches: [test-playwright-torsdag]
jobs:
  update-screenshots:
    name: Update screenshots
    runs-on: ubuntu-latest-16-cores
    permissions:
      id-token: "write"
      contents: write
      pull-requests: write
    steps:
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: 'https://npm.pkg.github.com'
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - run: npm run build-storybook
      - name: Run Playwright update screenshots
        run: docker run --rm -v $(pwd):/workspace -w /workspace --ipc=host mcr.microsoft.com/playwright:v1.49.1-noble /bin/bash -c "CI=true npx playwright test --update-snapshots"
      - name: Commit and push updated screenshots
        if: always()
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Playwright screenshots"

      - name: Handle PR Review
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { repo, owner } = context.repo;
              
              const changedFiles = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: context.issue.number
              });
              
              const hasScreenshotChanges = changedFiles.data
                .some(file => file.filename.endsWith('.png') && file.status === 'modified');
              
              const reviews = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: context.issue.number
              });
              
              const botReview = reviews.data.find(review => 
                review.user.login === 'github-actions[bot]' && 
                review.state === 'CHANGES_REQUESTED'
              );
              
              if (hasScreenshotChanges && !botReview) {
                await github.rest.pulls.createReview({
                  owner,
                  repo,
                  pull_number: context.issue.number,
                  body: '## Visual changes detected, [check](${context.payload.pull_request.html_url}/files) before merging.',
                  event: 'REQUEST_CHANGES'
                });
              } else if (!hasScreenshotChanges && botReview) {
                await github.rest.pulls.dismissReview({
                  owner,
                  repo,
                  pull_number: context.issue.number,
                  review_id: botReview.id,
                  message: 'Visual changes have been reverted'
                });
              }
            } catch (error) {
              console.log('Error:', error);
              core.setFailed('Failed to handle review');
            }