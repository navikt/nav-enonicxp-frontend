name: Update Playwright screenshots
on:
  push:
    branches: [playwright-regresiion-test]
  pull_request:
    branches: [playwright-regresiion-test]
jobs:
  update-screenshots:
    name: Update screenshots
    runs-on: ubuntu-latest-16-cores
    permissions:
      id-token: "write"
      contents: write
      pull-requests: write
    steps:
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: 'https://npm.pkg.github.com'
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - run: npm run build-storybook
      - name: Run Playwright update screenshots
        run: docker run --rm -v $(pwd):/workspace -w /workspace --ipc=host mcr.microsoft.com/playwright:v1.49.1-noble /bin/bash -c "CI=true npx playwright test --update-snapshots"
      - name: Commit and push updated screenshots
        if: always()
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Playwright screenshots"

      - name: Create PR Review if screenshots were updated
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        uses: actions/github-script@v7
        env:
          STORYBOOK_URL: ${{ env.STORYBOOK_URL || '' }}
        with:
          script: |
            try {
              const { repo, owner } = context.repo;
              
              const changedFiles = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: context.payload.pull_request.number
              });
              
              const screenshotsByComponent = {};
              
              for (const file of changedFiles.data) {
                if (file.filename.endsWith('.png')) {
                  const componentName = file.filename.split('/')[0];
                  if (!screenshotsByComponent[componentName]) {
                    screenshotsByComponent[componentName] = [];
                  }
                  screenshotsByComponent[componentName].push(file.filename);
                }
              }
              
              let message = '# 🔍 Visual Changes Review Required\n\n';
              message += '## 📸 Changed Screenshot Files\n\n';
              
              for (const [component, files] of Object.entries(screenshotsByComponent)) {
                message += `### 📁 ${component}\n`;
                for (const file of files) {
                  const fileName = file.split('/').pop();
                  const fileId = Buffer.from(file).toString('base64');
                  message += `- 🖼️ \`${fileName}\`\n`;
                  message += `  - [View file](${context.payload.pull_request.html_url}/files#diff-${fileId})\n`;
                  if (process.env.STORYBOOK_URL) {
                    const storyPath = file.replace('.png', '');
                    message += `  - [View in Storybook](${process.env.STORYBOOK_URL}?path=/story/${storyPath})\n`;
                  }
                }
                message += '\n';
              }
              
              message += '## 📋 Review Instructions\n\n';
              message += '1. Click the "View file" links above to see the changes\n';
              message += '2. For each screenshot:\n';
              message += '   - Compare the visual changes\n';
              message += '   - Check layout, spacing, and alignment\n';
              message += '   - Verify colors and styling match the design\n\n';
              
              message += '## ✅ How to Approve\n\n';
              message += '- If changes look correct: Click "Approve" above\n';
              message += '- If changes need work: Click "Request Changes"\n\n';
              
              message += '> ⚠️ **Note**: PR cannot be merged until screenshots are approved\n';
              message += '> 💡 **Tip**: Use GitHub\'s image comparison tools to spot differences';
              
              await github.rest.pulls.createReview({
                owner,
                repo,
                pull_number: context.payload.pull_request.number,
                body: message,
                event: 'REQUEST_CHANGES'
              });
            } catch (error) {
              console.log('Error creating review:', error);
              core.setFailed('Failed to create PR review');
            }

