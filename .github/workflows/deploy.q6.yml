name: Deploy-to-q6
on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev-sbs:q6
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          registry-url: 'https://npm.pkg.github.com'
      - name: Define build environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IMAGE_VERSION_RAW=$(echo ${GITHUB_WORKFLOW})-$(echo ${GITHUB_SHA})
          echo "CI=true" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=docker.pkg.github.com/$(echo ${GITHUB_REPOSITORY})" >> $GITHUB_ENV
          echo "IMAGE_NAME=$(echo ${GITHUB_REPOSITORY##*/})" >> $GITHUB_ENV
          echo "IMAGE_VERSION=${IMAGE_VERSION_RAW,,}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=$(echo ${GITHUB_TOKEN})" >> $GITHUB_ENV
      - name: Define app environmment
        env:
          SERVICE_SECRET: ${{ secrets.SERVICE_SECRET }}
        run: |
          cat > .env <<EOF
          ENV=q6
          NODE_ENV=production
          ADMIN_ORIGIN=https://portal-admin-q6.oera.no
          APP_ORIGIN=https://www-q6.nav.no
          DECORATOR_FALLBACK_URL=https://www-q6.nav.no/dekoratoren
          XP_ORIGIN=https://www-q6.nav.no
          REVALIDATOR_PROXY_ORIGIN=http://nav-enonicxp-frontend-revalidator-proxy
          SERVICE_SECRET=$SERVICE_SECRET
          INNLOGGINGSTATUS_URL=https://innloggingsstatus.dev.nav.no/person/innloggingsstatus/auth
          PAGE_CACHE_DIR=/tmp/pages
          EOF
      - name: Npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Nextjs cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_READER_TOKEN }}
      - name: Build application
        run: npm run build
      - name: Docker build and push
        run: |
          NEXT_VERSION=$(npm list --json | jq '.dependencies.next.version' --raw-output)
          echo $NEXT_VERSION
          echo $(npm list --json)
          echo $GITHUB_TOKEN | docker login $IMAGE_REGISTRY -u ${GITHUB_REPOSITORY} --password-stdin
          docker build --build-arg NEXT_VERSION=$NEXT_VERSION -t $IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION .
          docker push $IMAGE_REGISTRY/$IMAGE_NAME:$IMAGE_VERSION
      - name: Generate nais variables
        run: |
          cat > .nais/vars.yaml <<EOF
          namespace: q6
          ingresses:
            - https://www-q6.nav.no
          image: $IMAGE_REGISTRY/$IMAGE_NAME
          version: $IMAGE_VERSION
          EOF
      - name: Deploy to nais k8s
        uses: nais/deploy/actions/deploy@master
        env:
          CLUSTER: dev-sbs
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          RESOURCE: .nais/config-dev.yaml
          VARS: .nais/vars.yaml
